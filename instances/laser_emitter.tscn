[gd_scene load_steps=12 format=3 uid="uid://cgfsmadnui1ru"]

[ext_resource type="Texture2D" uid="uid://45yeungtmxeu" path="res://local_res/laser_emitter_ico.png" id="1_8kuue"]
[ext_resource type="Script" path="res://instances/laser_emitter.gd" id="1_jjfv8"]
[ext_resource type="Texture2D" uid="uid://cf08bglhkxl7i" path="res://ui/sprites/line_dashed.png" id="2_41dh3"]
[ext_resource type="Theme" uid="uid://b7xrw7crccrr7" path="res://ui/ridiculous_stream_main.theme" id="5_b1f6m"]

[sub_resource type="Gradient" id="Gradient_042s6"]
offsets = PackedFloat32Array(0, 0.490085, 0.994334)
colors = PackedColorArray(1, 1, 1, 1, 0.796803, 0.531307, 7.70092e-07, 1, 0.054902, 0.054902, 0.054902, 0.768627)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_3wf0h"]
gradient = SubResource("Gradient_042s6")

[sub_resource type="Curve" id="Curve_ag2oi"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0.512355), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_htw8j"]
curve = SubResource("Curve_ag2oi")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_lyrti"]
particle_flag_disable_z = true
direction = Vector3(0, -1, 0)
spread = 30.704
initial_velocity_min = 216.27
initial_velocity_max = 334.65
gravity = Vector3(0, 980, 0)
scale_min = 5.0
scale_max = 20.0
scale_curve = SubResource("CurveTexture_htw8j")
color_ramp = SubResource("GradientTexture1D_3wf0h")
collision_mode = 1
collision_friction = 0.0
collision_bounce = 0.0

[sub_resource type="Shader" id="Shader_efcki"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/energy-beams

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;
render_mode blend_add; // Remove this if you want to use HDR glow instead (use \"Glow\" and \"Outline Glow\" sliders)

uniform int beams = 2; // How many beams the energy field should have

uniform float energy = 3.0; // How much the beams will travel up and down
uniform int roughness : hint_range(1, 10) = 3; // How compact the noise texture will be
uniform int frequency = 10; // Amount of \"ripples\" in the beams

uniform float speed = 1.0; // Animation speed
uniform float thickness : hint_range(0.0, 0.1) = 0.006; // Thickness of the main beam
uniform float outline_thickness : hint_range(0.0, 0.1) = 0.03; //Thickness of the outline color
uniform float beam_difference : hint_range(0.0, 1.0) = 0.0; // The thickness difference between the main beam and the other, if there are more than one beam. The closer to 1 the smaller the thickness difference.

uniform float glow : hint_range(0.0, 3.0) = 0.0; // Use together with WorldEnvironment's Glow feature
uniform float outline_glow : hint_range(0.0, 3.0) = 0.0;

uniform vec4 color : source_color = vec4(0.91, 1.0, 1.0, 1.0);
uniform vec4 outline_color : source_color = vec4(0.5, 1.0, 0.96, 1.0);

uniform float progress : hint_range(0.0, 1.0) = 1.0;

uniform float y_offset : hint_range (-0.5, 0.5) = 0.0; // Position of the beam
uniform float fixed_edge_size : hint_range(0.0, 0.5) = 0.05; // How close to the edge should the beam be still before the animatino starts
uniform vec2 noise_scale = vec2(1.0); // If the object (for example the ColorRect or Sprite node) is compressed use this to compensate for the noise texture being compressed.

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv, float time) {
    int octaves = roughness;
    float amp = 0.01 * energy * progress;
    float freq = float(frequency);
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amp * noise(freq * vec2(uv.x, uv.y + time));
        amp *= 0.5;
        freq *= 2.0;
    }
    return value;
}

vec4 difference(vec4 base, vec4 blend){
	return abs(base - blend);
}

vec4 bolt(vec2 uv, float time, float i)
{
	// Setup the beam locking to the edges.
	float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);
	
	// Use Fractal Brownian Motion to create a \"cloud texture\" and use Difference blend mode to make the beam
	vec4 clouds = vec4(fbm((uv + vec2(i) ) * noise_scale, time * speed)) * falloff;
	vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));
	
	// Create a new noise to mask the beams on low \"progress\" values. To make a \"turn-off\" effect more visually interesting.
	vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;
	diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);
	
	// Set thickness of the beams. First beam is the Thickness size and all following beams are sized with beam_difference
	float thickness2 =  1. - ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;
	vec4 beam = clamp(smoothstep(thickness2, thickness2 + 0.005 * progress, 1.0 - diff_clouds), vec4(0.0), vec4(1.0));
	
	//Set the beam outlines
	vec4 beam_outline;
	float outline = thickness2 - (outline_thickness * progress);
	beam_outline = clamp(smoothstep(outline, outline + 0.04, 1.0 - diff_clouds), 0.0, 1.0);
	beam_outline = clamp(beam_outline - beam, 0.0, 1.0);
	
	// Merge the beam and the outline and return to the fragment function
	return (beam * (color + vec4(glow, glow, glow, 0.))) + (beam_outline * (outline_color + vec4(outline_glow, outline_glow, outline_glow, 0.)));
}

void fragment()
{	
	vec4 beam = vec4(0.0);
	
	for (int i = 0; i < beams; i++){
		beam = max(beam, bolt(UV, TIME, float(i)));
	}
	
	COLOR = beam;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jmwy2"]
shader = SubResource("Shader_efcki")
shader_parameter/beams = 2
shader_parameter/energy = 7.905
shader_parameter/roughness = 3
shader_parameter/frequency = 50
shader_parameter/speed = 1.0
shader_parameter/thickness = 0.1
shader_parameter/outline_thickness = 0.1
shader_parameter/beam_difference = 0.0
shader_parameter/glow = 0.0
shader_parameter/outline_glow = 0.0
shader_parameter/color = Color(0.89062, 0.492979, 0.999999, 1)
shader_parameter/outline_color = Color(0.988235, 0.0745098, 0.0980392, 1)
shader_parameter/progress = 1.0
shader_parameter/y_offset = 0.0
shader_parameter/fixed_edge_size = 0.05
shader_parameter/noise_scale = Vector2(1, 1)

[node name="laser_emitter" type="Node2D"]
script = ExtResource("1_jjfv8")

[node name="laser_cannon" type="Sprite2D" parent="."]
scale = Vector2(0.3, 0.3)
texture = ExtResource("1_8kuue")

[node name="impact_particles" type="GPUParticles2D" parent="."]
unique_name_in_owner = true
emitting = false
amount = 50
process_material = SubResource("ParticleProcessMaterial_lyrti")

[node name="line" type="Line2D" parent="."]
unique_name_in_owner = true
texture_repeat = 2
material = SubResource("ShaderMaterial_jmwy2")
position = Vector2(0, 10)
points = PackedVector2Array(0, 0, 0, 382)
width = 30.0
texture = ExtResource("2_41dh3")
texture_mode = 1

[node name="ray" type="RayCast2D" parent="."]
unique_name_in_owner = true
visible = false
position = Vector2(0, 10)
target_position = Vector2(0, 3000)

[node name="lb_counter" type="Label" parent="."]
unique_name_in_owner = true
z_index = 100
z_as_relative = false
offset_left = -100.0
offset_top = -115.0
offset_right = 100.0
offset_bottom = -73.0
theme = ExtResource("5_b1f6m")
theme_override_font_sizes/font_size = 28
horizontal_alignment = 1
vertical_alignment = 1
